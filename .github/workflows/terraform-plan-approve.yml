name: Terraform CI/CD with Approval

on:
  push:
    branches:
      - main
  
jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment:
      name: dev

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.6
        

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      if: github.repository == 'HerbyJ3/Git-Argo-Eks' && github.ref == 'refs/heads/main'
      run: terraform plan
  
  terraform-apply:
    name: Terraform Apply
    needs: terraform-plan
    runs-on: ubuntu-latest
    environment:
      name: dev
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.6
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
      
    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      if: github.repository == 'HerbyJ3/Git-Argo-Eks' && github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve
    
  terraform-outputs:
    name: Capture Terraform Outputs
    needs: terraform-apply
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.6
        terraform_wrapper: false

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      run: terraform init
      
    - name: Set environment variables
      run: |
        echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
        echo "REGION=$(terraform output -raw region)" >> $GITHUB_ENV

    - name: Configure kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --name $CLUSTER_NAME --region $REGION
  
    - name: Create argocd namespace (if not exists)
      run: |
        kubectl create namespace argocd || true
  
    - name: Install Argo CD with ALB Ingress via Helm
      run: |
        helm repo add argo https://argoproj.github.io/argo-helm
        helm repo update
  
        cat <<EOF > values.yaml
        server:
          service:
            type: ClusterIP
    
          ingress:
            enabled: true
            ingressClassName: alb
            annotations:
              alb.ingress.kubernetes.io/target-type: ip
              alb.ingress.kubernetes.io/scheme: internet-facing

          ingressGrpc:
            enabled: true
            isAWSALB: true
            ingressClassName: alb 
        EOF

          helm upgrade --install argocd argo/argo-cd \
            --namespace argocd \
            --version 7.8.26 \
            -f values.yaml
          
    - name: Output Argo CD Admin Password and ALB URL
      run: |
        echo "üîí Retrieving Argo CD Admin Password..."
        PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret \
        -o jsonpath="{.data.password}" | base64 -d)

        echo "‚úÖ Initial Admin Argo Password: $PASSWORD"
        echo ""

        echo "üåê Retrieving Argo CD ALB Public URL..."
        ALB_URL=$(kubectl get ingress -n argocd -o jsonpath="{.items[0].status.loadBalancer.ingress[0].hostname}")
        
        echo "‚úÖ Argo CD UI URL: https://$ALB_URL"
    
      
      
